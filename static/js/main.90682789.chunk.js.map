{"version":3,"sources":["components/MainWindow.js","App.js","serviceWorker.js","index.js"],"names":["lunchPlace","MainWindow","props","state","selectedPlace","selectRandomCallback","bind","selecterNumber","lenght","randomValue","Math","floor","random","console","log","selectRandom","length","this","setState","Container","Box","Button","variant","color","onClick","Typography","Component","theme","createMuiTheme","palette","primary","blue","secondary","green","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gWAIMA,EAAa,CACjB,OACA,QACA,mBACA,yBACA,sBACA,oBACA,oBACA,gBACA,aACA,wBACA,cACA,OACA,QACA,QACA,WACA,iBACA,gBACA,YACA,UACA,cACA,eACA,YACA,gBACA,qBAQK,IA+BQC,EA/Bf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,cAAe,IAC9B,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAHX,EADrB,oFAOI,IAAMC,EAZV,SAAsBC,GACpB,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,GAE7C,OADAK,QAAQC,IAAIL,GACLA,EASkBM,CAAaf,EAAWgB,QAC/CC,KAAKC,SAAS,CAAEd,cAAeJ,EAAWO,OAR9C,+BAYI,OACE,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAASP,KAAKZ,sBAHhB,iBAQF,kBAACe,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CAAYH,QAAQ,MAAML,KAAKd,MAAMC,qBAxB/C,GAAgCsB,aC1B1BC,EAAQC,YAAe,CAM3BC,QAAS,CACPC,QAASC,IACTC,UAAWC,OAYAC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAeR,MAAOA,GACpB,kBAAC,EAAD,QCbcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.90682789.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Button, Typography, Container, Box } from '@material-ui/core';\r\n\r\nconst lunchPlace = [\r\n  'Arab',\r\n  'Oliva',\r\n  'Vietnam - narohu',\r\n  'Vietnam - u autobusaku',\r\n  'Vietnam - nejstarsi',\r\n  'Vietnamske bagety',\r\n  'Pizza - LaFamilia',\r\n  'Pizza - Altia',\r\n  'Menza dole',\r\n  'Vegie garden + albert',\r\n  'Indie velka',\r\n  'Cina',\r\n  'Burgr',\r\n  'Opera',\r\n  'Pivoklub',\r\n  'Karlinsky mlyn',\r\n  'Co albert dal',\r\n  'Strelnice',\r\n  'Poutine',\r\n  'Wok vietnam',\r\n  'Quick & easy',\r\n  'Manifesto',\r\n  'Green factory',\r\n  'Najit neco noveho'\r\n];\r\n\r\nfunction selectRandom(lenght) {\r\n  let randomValue = Math.floor(Math.random() * lenght);\r\n  console.log(randomValue);\r\n  return randomValue;\r\n}\r\nexport class MainWindow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { selectedPlace: '' };\r\n    this.selectRandomCallback = this.selectRandomCallback.bind(this);\r\n  }\r\n  selectRandomCallback() {\r\n    const selecterNumber = selectRandom(lunchPlace.length);\r\n    this.setState({ selectedPlace: lunchPlace[selecterNumber] });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.selectRandomCallback}\r\n          >\r\n            Select place\r\n          </Button>\r\n        </Box>\r\n        <Box>\r\n          <Typography variant=\"h1\">{this.state.selectedPlace}</Typography>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from 'react';\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nimport MainWindow from './components/MainWindow';\r\n\r\nconst theme = createMuiTheme({\r\n  // typography: {\r\n  //   button: {\r\n  //     fontStyle: 'italic'\r\n  //   }\r\n  // }\r\n  palette: {\r\n    primary: blue,\r\n    secondary: green\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MainWindow />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}